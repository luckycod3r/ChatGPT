const { Configuration, OpenAIApi } = require("openai");
const chalk = require('chalk');
const configuration = new Configuration({
  apiKey: "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",
});
const openai = new OpenAIApi(configuration);
const TelegramBot = require('node-telegram-bot-api');

const token = '6004786246:AAFWl_xxMgpN2iN64WgRRdwENO2BJj8h3Cw';
const bot = new TelegramBot(token, {polling: true});
const help_messages = "\n\n–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ 100% –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç–∞–∫ —á—Ç–æ –µ—Å–ª–∏ –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ –∫—Ä–∞—Å–∏–≤–æ–µ, —Ç–æ —Ç–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å";

let tab = "main";
console.log(chalk.red("–í—Å–µ–ª–µ–Ω–Ω–∞—è –±—É–¥–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ —á–µ—Ä–µ–∑..."))
bot.on("help",()=>{
  console.log(123);
})
function help(){
  console.log(1234)
}
let BTNS = {
  IMAGE : "üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É",
  GPT : "ü§ñ –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ò–ò",
  CLOSE : "‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç"
}
function buildKeyBoard(){
  let obj = null;
  if(tab == "main"){
    obj = [
      {
        text : BTNS.IMAGE
      },
      {
        text : BTNS.GPT
      }
    ]
  }
  else{
    obj = [
      {
        text : BTNS.CLOSE
      }
    ]
  }
  return [obj];
  
}
function checkAction(msg, id){
 
  if(msg == BTNS.GPT){
    tab = "gpt";
    bot.sendMessage(id,"–ß–∞—Ç —Å –ò–ò –Ω–∞—á–∞—Ç, –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã",{
      reply_markup : {
        keyboard : buildKeyBoard(),
        one_time_keyboard : true
      }
    });
  }
  else if(msg == BTNS.IMAGE){
    tab = "image";
    bot.sendMessage(id,"–ß–∞—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞—á–∞—Ç, –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã",{
      reply_markup : {
        keyboard : buildKeyBoard(),
        one_time_keyboard : true
      }
    });
  }
  else if(msg == BTNS.CLOSE){
    tab = "main";
    bot.sendMessage(id,"–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç",{
      reply_markup : {
        keyboard : buildKeyBoard(),
        one_time_keyboard : true
      }
    });
  }

  
}

function sendPrompt(prompt,chatId){
  if(tab == "gpt"){
    console.log(chalk.red("–í–æ–ø—Ä–æ—Å: ") + chalk.white(prompt));
    bot.sendMessage(chatId, "ü§ñ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ChatGPT. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏").then((data)=>{
      try {
        openai.createCompletion({
          model: "text-davinci-003",
          prompt: prompt,
          temperature : 0.9,
          max_tokens : 1000,
          top_p : 1.0,
          frequency_penalty : 0.0,
          presence_penalty : 0.6,
          stop : ["You:"]
        }).then((res)=>{
          console.log(chalk.green("–û—Ç–≤–µ—Ç: ") + chalk.white(res.data.choices[0].text));
          bot.editMessageText(`‚úÖ –û—Ç–≤–µ—Ç ${res.data.choices[0].text}`,{
            chat_id : chatId,
            message_id : data.message_id
          })
        });
      } catch (error) {
        bot.editMessageText(`üìõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞`,{
          chat_id : chatId,
          message_id : data.message_id
        })
      }
      
      })
  }
  else if(tab == "image"){
    console.log(chalk.red("–í–æ–ø—Ä–æ—Å: ") + chalk.white(prompt));
    try{
    openai.createImage({
      "prompt": prompt,
      "n": 2,
      "size": "1024x1024"
      }).then((res)=>{
          
          bot.sendPhoto(chatId, res.data.data[0].url)
      })
    } catch (error) {
      bot.editMessageText(`üìõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞`,{
        chat_id : chatId,
        message_id : data.message_id
      })
    }
  }
}

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  
  if(tab == "main"){
    checkAction(msg.text, chatId);
    if(tab == "main"){
      bot.sendMessage(chatId,"üïπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
        reply_markup : {
          keyboard : buildKeyBoard(),
          one_time_keyboard : true
        }
      })
    }
  }
  else{
    checkAction(msg.text, chatId);
    if(tab != "main"){
        sendPrompt(msg.text,chatId);
    }
  }

});
bot.on('callback_query', function onCallbackQuery(callbackQuery) {
  const action = callbackQuery.data;
  const msg = callbackQuery.message;
  const opts = {
      chat_id: msg.chat.id,
      message_id: msg.message_id,
  };
  let text;

  if (action === 'help') {
      text = '–í—ã –Ω–∞–∂–∞–ª–∏ –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É';
     
  }
  console.log(2333);
  bot.editMessageText(text, opts);
});